sourceCpp('openmp_test.cpp')
system.time(doublify2(z))
z <- sample(1:10, 1e8, replace = T)
system.time(doublify2_omp(z, 2))
z <- sample(1:10, 1e8, replace = T)
system.time(doublify2_omp(z, 3))
z <- sample(1:10, 1e8, replace = T)
system.time(doublify2_omp(z, 4))
x <- runif(1e7)
all.equal(mean(x), mean_serial(x), mean_parallel(x,1), mean_parallel(x,8))
m <- microbenchmark(mean(x), mean_serial(x), mean_parallel(x,1),mean_parallel(x,2), mean_parallel(x,3), mean_parallel(x,4), mean_parallel(x,5), mean_parallel(x,6),
mean_parallel(x,7), mean_parallel(x,8))
m
plot(m)
sourceCpp('openmp_test.cpp')
sourceCpp('openmp_test.cpp')
all.equal(mean(x), mean_serial(x), mean_parallel(x,1), mean_parallel(x,8), mean_parallel2(x,8))
m <- microbenchmark(mean(x), mean_serial(x), mean2_parallel(x,1), mean2_parallel(x,2), mean2_parallel(x,3), mean2_parallel(x,4), mean2_parallel(x,5), mean2_parallel(x,6),
mean2_parallel(x,7), mean2_parallel(x,8))
m
plot(m)
sourceCpp('armadillo_test.cpp')
install.packages("RcppArmadillo")
library(RcppArmadillo)
sourceCpp('armadillo_test.cpp')
library(microbenchmark)
library(RcppArmadillo)
sourceCpp('armadillo_test.cpp')
library(Rcpp)
sourceCpp('armadillo_test.cpp')
sourceCpp('armadillo_test.cpp')
sourceCpp('armadillo_test.cpp')
vignette('RcppArmadillo')
?vignette
vignette()
vignette('RcppArmadillo-intro')
sourceCpp('armadillo_test.cpp')
m <- matrix(1:12, ncol=3)
m
a1(m)
sourceCpp('armadillo_test.cpp')
a2(1:10)
str(a2(1:10))
str(1:10)
a3(m)
sourceCpp('armadillo_test.cpp')
sourceCpp('armadillo_test.cpp')
a3(m)
sourceCpp('armadillo_test.cpp')
a4(m)
sourceCpp('armadillo_test.cpp')
sourceCpp('armadillo_test.cpp')
a5(m)
sourceCpp('armadillo_test.cpp')
a6(m)
a6(1:10)
sourceCpp('armadillo_test.cpp')
a7(m)
m <- matrix(1:12, ncol=3)
a7a(m)
sourceCpp('armadillo_test.cpp')
a7a(m)
sourceCpp('armadillo_test.cpp')
a8(21, 3, 70)
a8(5, 3, 70)
sourceCpp('armadillo_test.cpp')
a9(5,3)
sourceCpp('armadillo_test.cpp')
a9(5,3)
str(a9(5,3))
m
sourceCpp('armadillo_test.cpp')
a10(m, 2, 3)
a10(m, 1, 2)
sourceCpp('armadillo_test.cpp')
a11(m, 1)
sourceCpp('armadillo_test.cpp')
a12(m, 1)
sourceCpp('armadillo_test.cpp')
a13(m, 0, 1)
a13(m)
sourceCpp('armadillo_test.cpp')
a14(m)
sourceCpp('armadillo_test.cpp')
a15(m)
m %*% m
m %*% t(m)
m1 <- matrix(1:9, ncol=3)
m1 %*% m1
a16(m1)
sourceCpp('armadillo_test.cpp')
a16(m1)
m1 * m1
sourceCpp('armadillo_test.cpp')
exp(m)
a17(x)
a17(m)
sourceCpp('armadillo_test.cpp')
a18(m)
sourceCpp('armadillo_test.cpp')
t(m) %*% m
a19(m)
sourceCpp('armadillo_test.cpp')
inv(t(m) %*% m)
solve(t(m) %*% m)
a20(m)
solve(m1 %*% m)
solve(m1 %*% m1)
solve(m)
solve(m1)
m2 <- matrix(runif(9), ncol=3)
solve(m2)
a20(m)
sourceCpp('armadillo_test.cpp')
a20(m)
a20(m2)
m
a19(m)
sourceCpp('armadillo_test.cpp')
chol(m2)
m2
m2^2
cov(m2)
chol(cov(m2))
m3 <- abs(cov(m2))
chol(m3)
?chol
m3 <- matrix(c(5,1,1,3),2,2)
chol(m3)
a21(m3)
factorial(7)
t <- seq(0,1, by=,01)
t <- seq(0,1, by=.01)
f <- function(t) (exp(t) - exp(-t)) / (2*t)
plot(t, f(t))
sourceCpp('armadillo_test.cpp')
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
sourceCpp('armadillo_test.cpp')
a22(m3)
m1 <- matrix(1:9, ncol=3)
m2 <- matrix(runif(9), ncol=3)
m3 <- matrix(c(5,1,1,3),2,2)
a22(m3)
svd(m3)
sourceCpp('armadillo_test.cpp')
a23(1)
a23(2)
sourceCpp('armadillo_test.cpp')
a24(3)
a24(2)
sourceCpp('armadillo_test.cpp')
data(iris)
head(iris)
lm(iris$Sepal.Length ~ iris$Sepal.Width + iris$Petal.Length)
str(iris[1,])
str(iris[,1])
lmA(iris[, 2:3],  iris[ ,1])
as.matrix(iris[, 2:3])
lmA(as.matrix(iris[, 2:3]),  iris[ ,1])
as.matrix(iris[ ,1])
lmA(as.matrix(iris[, 2:3]),  as.matrix(iris[ ,1]))
lm(iris$Sepal.Length ~ iris$Sepal.Width + iris$Petal.Length)
View(iris)
cbind(1, as.matrix(iris[, 2:3]))
lmA(cbind(1, as.matrix(iris[, 2:3])),  as.matrix(iris[ ,1]))
lm(iris$Sepal.Length ~ iris$Sepal.Width + iris$Petal.Length)
microbenchmark(lm(iris$Sepal.Length ~ iris$Sepal.Width + iris$Petal.Length), lmA(cbind(1, as.matrix(iris[, 2:3])),  as.matrix(iris[ ,1])))
source('../test_code/loadmnist.R')
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
setwd("C:/HY-Data/HYVI/git/MRPT/mrpt_code/test")
source('../test_code/loadmnist.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
sourceCpp('test_cpp.R')
sourceCpp('../source/tree.cpp')
x
a <- buildTree(x)
str(a)
str(a[[1]])
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- buildTree(x)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- buildTree(x)
sourceCpp('../source/tree.cpp')
a <- buildTree(x)
sourceCpp('../source/tree.cpp')
a <- buildTree(x)
sourceCpp('../source/tree.cpp')
a <- buildTree(x)
n_0 <- 8
a <- buildTree(x, n_0)
ceiling(log2(100/8))
a <- buildTree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 1)
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
source('../test_code/loadmnist.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- buildTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
vignette('RcppArmadillo-intro')
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- growTree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 2)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 2)
a <- grow_tree(x, n_0, 2)
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
source('../test_code/loadmnist.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
n_0 <- 8
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
source('C:/HY-Data/HYVI/git/MRPT/mrpt_code/test/test_cpp.R', echo=TRUE)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
source('../test_code/loadmnist.R')
source('../test_code/test_code.R')
source('../test_code/test_code_plot2.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
set.seed(667)
k <- 8
max_S <- 9
system.time(rp3 <- build_contours_power2(X_test, min_S=3, max_S=max_S, min_leaf=3))
system.time(tmt_old <- test_contours(x, X_test, rp3, k))
plot(tmt_old)
set.seed(667)
source('tree_matrix_same2.R')
source('../source/tree_matrix_same2.R')
system.time(rp4 <- build_contours_power2(X_test, min_S=3, max_S=max_S, min_leaf=3))
system.time(tmt <- test_contours(x, X_test, rp4, k))
plot(tmt)
plot(tmt, search_space=T)
plot(tmt_old, search_space=T)
source('../test_code/loadmnist.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(x, n_0, 1)
n <- nrow(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
dim <- ncol(x)
dim <- ncol(x)
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
x <- X_test
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
4096/8
2^9
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
str(a)
table(a$clusters)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
2^16
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
str(a)
table(a$clusters)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
str(a)
table(a$clusters)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
str(a)
table(a$clusters)
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
source('../test_code/loadmnist.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
x <- X_test
# generate random matrix and compute projected data
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
str(a)
table(a$clusters)
microbenchmark(test_nm(X_mnist), test_arma(X_mnist))
sourceCpp('../source/tree.cpp')
microbenchmark(test_nm(X_mnist), test_arma(X_mnist), test_const_arma(X_mnist))
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
str(a)
table(a$clusters)
sourceCpp('../source/tree.cpp')
a <- grow_tree(projected_data, dim, n_0, 1, print_tr = F)
str(a)
table(a$clusters)
