library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
source('../test_code/loadmnist.R')
# load mnist data
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
test_points <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
x <- X_test
# generate random matrix and compute projected data
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
projected_query <- test_points %*% random_matrix
sourceCpp('../source/tree.cpp')
res <- test(x, 2, n_0, print_tr = F, t(projected_query))
str(res)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
source('../test_code/visualize_tree.R')
source('../test_code/visualize_tree.R')
# create 2Dtest data
set.seed(666)
n_sim <- 32
x1 <- runif(n_sim)
x2 <- runif(n_sim)
x <- cbind(x1,x2)
n_test <- 10
test_points <- matrix(runif(2 * n_test), ncol=2)
# generate random matrix and compute projected data
n_0 <- 5
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
projected_query <- test_points %*% random_matrix
sourceCpp('../source/tree.cpp')
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
visualise_clusters(test_points, res$query_results, cex = 1.5, add = T, old_clusters =  res$leaf_labels)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
visualise_clusters(test_points, res$query_results, cex = 1.5, add = T, old_clusters =  res$leaf_labels)
res <- test(x, 2, n_0, print_tr = T, t(projected_query), 666)
sourceCpp('../source/tree.cpp')
res <- test(x, 2, n_0, print_tr = T, t(projected_query), 666)
sourceCpp('../source/tree.cpp')
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
set.seed(666)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
set.seed(666)
res <- test(x, 2, n_0, print_tr = T, t(projected_query))
visualise_clusters(x, res$leaf_labels)
source('../test_code/loadmnist.R')
# load mnist data
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
test_points <- X_mnist[x_idx,]
n_points <- nrow(x)
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
x <- X_test
# generate random matrix and compute projected data
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
projected_query <- test_points %*% random_matrix
# load mnist data
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
test_points <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
x <- X_test
# generate random matrix and compute projected data
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
projected_query <- test_points %*% random_matrix
source('../test_code/loadmnist.R')
# load mnist data
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
test_points <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
x <- X_test
# generate random matrix and compute projected data
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
projected_query <- test_points %*% random_matrix
noppa5 <- runif(1, min=1, max=5)
noppa5
noppa5 <- sample(1:5,1)
noppa5
replicate(noppa5,100)
replicate(100, noppa5)
replicate(sample(1:5,1))
replicate(100, sample(1:5,1))
table(replicate(100, sample(1:5,1)))
table(replicate(1e4, sample(1:5,1)))
sample(1:5,1)
dice <- 1:7
a <- 1
while(a <- a + 1  < 5)
print(a)
a <- 1
while((a <- a + 1)  < 5)
print(a)
sample(1:5)
(dice5 <- sample(1:5, 1))
?rep
dice7 <- 1:7
mask_dice7 <- rep(1, length(dice7))
for(i in 1:length(dice7))
while((dice5 <- sample(1:5, 1)) != 3)
if(dice5 < 3)
mask_dice7[i] <- 0;
dice7 <- dice7[mask_dice7]
dice7
dice7 <- 1:7
mask_dice7 <- rep(TRUE, length(dice7))
for(i in 1:length(dice7))
while((dice5 <- sample(1:5, 1)) != 3)
if(dice5 < 3)
mask_dice7[i] <- FALSE;
dice7 <- dice7[mask_dice7]
dice7 <- 1:7
while(length(dice7) > 1) {
mask_dice7 <- rep(TRUE, length(dice7))
for(i in 1:length(dice7))
while((dice5 <- sample(1:5, 1)) != 3)
if(dice5 < 3)
mask_dice7[i] <- FALSE;
dice7 <- dice7[mask_dice7]
}
noppa <- function(n) {
dice7 <- 1:n
while(length(dice7) > 1) {
mask_dice7 <- rep(TRUE, length(dice7))
for(i in 1:length(dice7))
while((dice5 <- sample(1:5, 1)) != 3)
if(dice5 < 3)
mask_dice7[i] <- FALSE;
dice7 <- dice7[mask_dice7]
}
}
table(replicate(1e3, noppa(7)))
noppa(7)
noppa <- function(n) {
dice7 <- 1:n
while(length(dice7) > 1) {
mask_dice7 <- rep(TRUE, length(dice7))
for(i in 1:length(dice7))
while((dice5 <- sample(1:5, 1)) != 3)
if(dice5 < 3)
mask_dice7[i] <- FALSE;
dice7 <- dice7[mask_dice7]
}
dice7
}
noppa(7)
table(replicate(1e3, noppa(7)))
replicate(1e2, noppa(7))
noppa <- function(n) {
dice7 <- 1:n
while(length(dice7) > 1) {
mask_dice7 <- rep(TRUE, length(dice7))
for(i in 1:length(dice7))
while((dice5 <- sample(1:5, 1)) != 3)
if(dice5 < 3)
mask_dice7[i] <- FALSE;
if (sum(mask_dice7)) dice7 <- dice7[mask_dice7]
}
dice7
}
table(replicate(1e2, noppa(7)))
table(replicate(1e4, noppa(7)))
table(replicate(1e4, noppa(7)))
sample(1:7, 1e4)
sample(1:7, 1e4, replace = T)
table(sample(1:7, 1e4, replace = T))
table(replicate(1e4, noppa(7)))
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
source('../test_code/loadmnist.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
test_points <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
x <- X_test
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
projected_query <- test_points %*% random_matrix
sourceCpp('../source/tree.cpp')
source('../test_code/knn.R')
source('../source/knn.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
test_points <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
knn(test_points[1,], X_test, n_0 = 8)
knn(test_points[1,], X_test, k = 8)
knn(X_test, test_points[1, ], k = 8)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
knnCpp(X_test, test_points[1, ], k = 8)
sourceCpp('../source/tree.cpp')
knn(X_test, test_points[1, ], k = 8)
knnCpp(X_test, test_points[1, ], k = 8)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
knn(X_test, test_points[1, ], k = 8)
knnCpp(X_test, test_points[1, ], k = 8)
microbenchmark(knn(X_test, test_points[1, ], k = 8), knnCpp(X_test, test_points[1, ], k = 8))
X_test_t <- t(X_test)
x_1_t <- t(test_points[1,])
knnCpp(X_test_t, x_1_t, k = 8)
knnCppT(X_test_t, x_1_t, k = 8)
sourceCpp('../source/tree.cpp')
knnCppT(X_test_t, x_1_t, k = 8)
knn(X_test, test_points[1, ], k = 8)
knnCpp(X_test, test_points[1, ], k = 8)
microbenchmark(knn(X_test, test_points[1, ], k = 8), knnCpp(X_test, test_points[1, ], k = 8), knnCppT(X_test_t, x_1_t, k = 8))
source('../test_code/loadmnist.R')
source('../source/knn.R')
# load mnist data
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
test_points <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
x <- X_test
# generate random matrix and compute projected data
n <- nrow(x)
dim <- ncol(x)
depth <- ceiling(log2(n/n_0))
n_pool <- depth
set.seed(667)
random_matrix <- matrix(rnorm(n = dim * n_pool), nrow = dim)
projected_data <- x %*% random_matrix
projected_query <- test_points %*% random_matrix
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
k <- 8
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
str(res)
res
sourceCpp('../source/tree.cpp')
res <- test(X_test, 2, n_0, test_points, k)
str(res)
res
res <- test(X_test, 16, n_0, test_points, k)
res
res <- test(X_test, 128, n_0, test_points, k)
res
unique(res$query_results)
unique(as.vector(res$query_results))
length(unique(as.vector(res$query_results)))
res <- test(X_test, 16, n_0, test_points, k)
res
sourceCpp('../source/tree.cpp')
sourceCpp('../source/tree.cpp')
res <- test(X_test, 16, n_0, test_points, k)
res
sourceCpp('../source/tree.cpp')
res <- test(X_test, 16, n_0, test_points, k)
res
source('../test_code/test_code.R')
source('../test_code/test_code_plot2.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
k <- 8
n_0 <- 8
k <- 8
set.seed(667)
max_S <- 9
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
system.time(rp3 <- build_contours_power2(X_test, min_S=3, max_S=max_S, min_leaf=3))
system.time(tmt_old <- test_contours(x, X_test, rp3, k))
plot(tmt_old)
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
source('../test_code/loadmnist.R')
source('../source/knn.R')
source('../test_code/test_code.R')
source('../test_code/test_code_plot2.R')
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^12+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
k <- 8
set.seed(667)
min_S <- 3
max_S <- 9
min_leaf <- 3
sourceCpp('../source/tree.cpp')
test_contoursCpp(X_test, min_S, max_S, min_leaf)
sourceCpp('../source/tree.cpp')
test_contoursCpp(X_test, min_S, max_S, min_leaf)
system.time(tmt_old <- test_contours(x, X_test, rp3, k))
system.time(rp3 <- build_contours_power2(X_test, min_S=min_S, max_S=max_S, min_leaf=min_leaf))
system.time(test_contoursCpp(X_test, min_S, max_S, min_leaf))
test_contoursCpp(X_test, min_S, max_S, min_leaf)
system.time(tmt_old <- test_contours(x, X_test, rp3, k))
tmt_old
500*0.5*50
500*0.1*50
library(Rcpp)
library(microbenchmark)
library(RcppArmadillo)
source('../test_code/loadmnist.R')
source('../source/knn.R')
source('../test_code/test_code.R')
source('../test_code/test_code_plot2.R')
# load mnist data
mnist <- loadmnist()
X_mnist <- mnist$X[1:(2^13+100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
k <- 8
set.seed(667)
min_S <- 3
max_S <- 10
min_leaf <- 3
# build contours of trees for data set X_test
system.time(rp3 <- build_contours_power2(X_test, min_S=min_S, max_S=max_S, min_leaf=min_leaf))
system.time(tmt_old <- test_contours(x, X_test, rp3, k))
sourceCpp('../source/tree.cpp')
tmt <- test_contoursCpp(X_test, min_S, max_S, min_leaf, x, k)
plot(tmt_old)
plot(tmt)
tmt_old[[7]]
tmt[[7]]
plot(tmt_old, times = T)
plot(tmt, times = T)
tmt_old[[8]]
tmt[[8]]
tmt_old[[8]]
n_train <- 2^12
X_mnist <- mnist$X[1:(n_train + 100), ]
x_idx <- 1:100
x <- X_mnist[x_idx,]
X_test <- X_mnist[-x_idx,]
# set parameters
n_0 <- 8
k <- 8
set.seed(667)
min_S <- 3
max_S <- 9
min_leaf <- 3
system.time(rp3 <- build_contours_power2(X_test, min_S=min_S, max_S=max_S, min_leaf=min_leaf))
system.time(tmt_old <- test_contours(x, X_test, rp3, k))
sourceCpp('../source/tree.cpp')
tmt <- test_contoursCpp(X_test, min_S, max_S, min_leaf, x, k)
plot(tmt)
plot(tmt_old)
plot(tmt_old, times = T)
plot(tmt, times = T)
plot(tmt_old, growing_times = T)
plot(tmt, growing_times = T)
tmt_old[[7]]
tmt[[7]]
X_test_t <- t(X_test)
x_1_t <- t(test_points[1,])
x_1_t <- t(x[1,])
knn(X_test, x[1, ], k = 8)
knnCpp(X_test, x[1, ], k = 8)
knnCppT(X_test_t, x_1_t, k = 8)
microbenchmark(knn(X_test, x[1, ], k = 8), knnCpp(X_test, x[1, ], k = 8), knnCppT(X_test_t, x_1_t, k = 8))
tmt
tmt_old
sourceCpp('../source/tree.cpp')
tmt <- test_contoursCpp(X_test, min_S, max_S, min_leaf, x, k)
plot(tmt)
plot(tmt_old)
plot(tmt_old, growing_times = T)
plot(tmt, growing_times = T)
tmt_old[[7]]
tmt[[7]]
plot(tmt)
tmt
tmt_old
sourceCpp('../source/tree.cpp')
tmt <- test_contoursCpp(X_test, min_S, max_S, min_leaf, x, k)
tmt_old[[7]]
tmt[[7]]
